@page "/"
@using System.Diagnostics
@using AsyncEnumerableSample.Client.Contracts
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode InteractiveWebAssembly

<PageTitle>Home-client</PageTitle>

<h1>Hello, world!</h1>

<FluentButton @onclick="LoadNumbersCSharpAsync" Disabled="@Loading">Load(CSharp)</FluentButton>
<FluentButton @onclick="LoadNumbersJsAsync" Disabled="@Loading">Load(Javascript)</FluentButton>

@foreach(var obj in Data)
{
    <p>@obj.Name</p>
}

@code {
    List<SampleDto> Data = new ();
    bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task LoadNumbersCSharpAsync()
    {
        Data.Clear();

        const string url = "/api/async-enumerable";

        try
        {
            Loading = true;
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.SetBrowserResponseStreamingEnabled(true);

            using var response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

            using var stream = await response.Content.ReadAsStreamAsync();
            await foreach (var obj in JsonSerializer.DeserializeAsyncEnumerable<SampleDto>(stream))
            {
                Data.Add(obj!);
                StateHasChanged();
            };
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task LoadNumbersJsAsync()
    {
        Data.Clear();

        try
        {
            Loading = true;

            var receiver = new JsStreamDataReceiver(Data, StateHasChanged);
            var dotNetObjectRef = DotNetObjectReference.Create(receiver);
            await JSRuntime.InvokeVoidAsync("window.fetchAsyncEnumerable", dotNetObjectRef);
        }
        finally
        {
            Loading = false;
        }
    }

    class JsStreamDataReceiver
    {
        private readonly List<SampleDto> _data;
        private readonly Action _stateHasChanged;

        public JsStreamDataReceiver(List<SampleDto> data, Action stateHasChanged)
        {
            _data = data;
            _stateHasChanged = stateHasChanged;
        }

        [JSInvokable]
        public void OnDataReceived(SampleDto obj)
        {
            _data.Add(obj);
            _stateHasChanged();
        }
    }
}